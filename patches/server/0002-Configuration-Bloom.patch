From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Euphyllia Bierque <bierque.euphyllia@gmail.com>
Date: Sun, 5 May 2024 02:54:59 +0200
Subject: [PATCH] Configuration Bloom


diff --git a/src/main/java/fr/euphyllia/bloom/configuration/GlobalConfiguration.java b/src/main/java/fr/euphyllia/bloom/configuration/GlobalConfiguration.java
new file mode 100644
index 0000000000000000000000000000000000000000..eb618442c99114c3b81c2522242944dad58654f8
--- /dev/null
+++ b/src/main/java/fr/euphyllia/bloom/configuration/GlobalConfiguration.java
@@ -0,0 +1,119 @@
+package fr.euphyllia.bloom.configuration;
+
+import com.google.common.collect.ImmutableMap;
+import org.bukkit.Bukkit;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.jetbrains.annotations.NotNull;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+import java.util.logging.Level;
+
+public class GlobalConfiguration {
+    public static YamlConfiguration config;
+    public static int version;
+    private static boolean verbose;
+    private static File CONFIG_FILE;
+
+    public static void init(File configFile) {
+        CONFIG_FILE = configFile;
+        config = new YamlConfiguration();
+        try {
+            config.load(CONFIG_FILE);
+        } catch (IOException ignored) {
+        } catch (InvalidConfigurationException e) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not load bloom.yml, please correct your syntax errors", e);
+            throw new RuntimeException(e);
+        }
+        config.options().copyDefaults(true);
+        verbose = getBoolean("verbose", false);
+        version = getInt("config-version", 2);
+        set("config-version", version);
+        readConfig(GlobalConfiguration.class, null);
+    }
+
+    protected static void log(Level level, String message) {
+        if (verbose) {
+            Bukkit.getLogger().log(level, message);
+        }
+    }
+
+    public static void readConfig(@NotNull Class<?> clazz, Object instance) {
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers()) && method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                try {
+                    method.setAccessible(true);
+                    method.invoke(instance);
+                } catch (InvocationTargetException e) {
+                    throw new RuntimeException(e.getCause());
+                } catch (Exception e) {
+                    Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, e);
+                }
+            }
+        }
+        try {
+            config.save(CONFIG_FILE);
+        } catch (IOException e) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, e);
+        }
+    }
+
+    private static void set(@NotNull String path, Object val) {
+        config.addDefault(path, val);
+        config.set(path, val);
+    }
+
+    private static String getString(@NotNull String path, String def) {
+        config.addDefault(path, def);
+        return config.getString(path);
+    }
+
+    private static boolean getBoolean(@NotNull String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean(path);
+    }
+
+    private static double getDouble(@NotNull String path, double def) {
+        config.addDefault(path, def);
+        return config.getDouble(path);
+    }
+
+    private static int getInt(@NotNull String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt(path);
+    }
+
+    private static <T> List<?> getList(@NotNull String path, T def) {
+        config.addDefault(path, def);
+        return config.getList(path);
+    }
+
+    static Map<String, ?> getMap(@NotNull String path, Map<String, ?> def) {
+        if (config.getConfigurationSection(path) == null) {
+            config.addDefault(path, def);
+            return def;
+        }
+        return toMap(Objects.requireNonNull(config.getConfigurationSection(path)));
+    }
+
+    private static Map<String, Object> toMap(ConfigurationSection section) {
+        ImmutableMap.Builder<String, Object> builder = ImmutableMap.builder();
+        for (String key : section.getKeys(false)) {
+            Object obj = section.get(key);
+            if (obj instanceof ConfigurationSection) {
+                builder.put(key, toMap((ConfigurationSection) obj));
+            } else {
+                builder.put(key, obj);
+            }
+        }
+        return builder.build();
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/fr/euphyllia/bloom/configuration/WorldConfiguration.java b/src/main/java/fr/euphyllia/bloom/configuration/WorldConfiguration.java
new file mode 100644
index 0000000000000000000000000000000000000000..fea1e7a698441b4601999edb54ce4938451d2331
--- /dev/null
+++ b/src/main/java/fr/euphyllia/bloom/configuration/WorldConfiguration.java
@@ -0,0 +1,66 @@
+package fr.euphyllia.bloom.configuration;
+
+import org.bukkit.World;
+import org.bukkit.configuration.ConfigurationSection;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.List;
+import java.util.Map;
+import java.util.logging.Level;
+
+public class WorldConfiguration {
+
+    private final String worldName;
+    private final World.Environment environment;
+    private String worldSettings = "world-settings.";
+    private String worldSettingsDefault = worldSettings + "default.";
+
+    public WorldConfiguration(String worldName, World.Environment environment) {
+        this.worldName = worldName;
+        this.environment = environment;
+        this.init();
+    }
+
+    public void init() {
+        GlobalConfiguration.log(Level.INFO, "-------- World Settings Bloom For [ %s ] --------".formatted(worldName));
+        GlobalConfiguration.readConfig(WorldConfiguration.class, this);
+    }
+
+    private void set(@NotNull String path, Object val) {
+        GlobalConfiguration.config.addDefault(worldSettingsDefault + path, val);
+        GlobalConfiguration.config.set(worldSettingsDefault + path, val);
+        if (GlobalConfiguration.config.get(worldSettings + worldName + "." + path) != null) {
+            GlobalConfiguration.config.addDefault(worldSettings + worldName + "." + path, val);
+            GlobalConfiguration.config.set(worldSettings + worldName + "." + path, val);
+        }
+    }
+    private ConfigurationSection getConfigurationSection(@NotNull String path) {
+        ConfigurationSection section = GlobalConfiguration.config.getConfigurationSection(worldSettings + worldName + "." + path);
+        return section != null ? section : GlobalConfiguration.config.getConfigurationSection(worldSettingsDefault + path);
+    }
+    private String getString(@NotNull String path, String def) {
+        GlobalConfiguration.config.addDefault(worldSettingsDefault + path, def);
+        return GlobalConfiguration.config.getString(worldSettings + worldName + "." + path, GlobalConfiguration.config.getString(worldSettingsDefault + path));
+    }
+    private boolean getBoolean(@NotNull String path, boolean def) {
+        GlobalConfiguration.config.addDefault(worldSettingsDefault + path, def);
+        return GlobalConfiguration.config.getBoolean(worldSettings + worldName + "." + path, GlobalConfiguration.config.getBoolean(worldSettingsDefault + path));
+    }
+    private double getDouble(@NotNull String path, double def) {
+        GlobalConfiguration.config.addDefault(worldSettingsDefault + path, def);
+        return GlobalConfiguration.config.getDouble(worldSettings + worldName + "." + path, GlobalConfiguration.config.getDouble(worldSettingsDefault + path));
+    }
+    private int getInt(@NotNull String path, int def) {
+        GlobalConfiguration.config.addDefault(worldSettingsDefault + path, def);
+        return GlobalConfiguration.config.getInt(worldSettings + worldName + "." + path, GlobalConfiguration.config.getInt(worldSettingsDefault + path));
+    }
+    private <T> List<?> getList(@NotNull String path, T def) {
+        GlobalConfiguration.config.addDefault(worldSettingsDefault + path, def);
+        return GlobalConfiguration.config.getList(worldSettings + worldName + "." + path, GlobalConfiguration.config.getList(worldSettingsDefault + path));
+    }
+    private Map<String, ?> getMap(@NotNull String path, Map<String, ?> def) {
+        final Map<String, ?> fallback = GlobalConfiguration.getMap(worldSettingsDefault + path, def);
+        final Map<String, ?> value = GlobalConfiguration.getMap(worldSettings + worldName + "." + path, null);
+        return value.isEmpty() ? fallback : value;
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 05bc06fcf508e74c717a7f71a2c7ed7c568e846a..e13a483a4f6e1e0d9b0e87f3ce2e2da3b07a481f 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -232,6 +232,14 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         thread.start(); // Paper - Enhance console tab completions for brigadier commands; start console thread after MinecraftServer.console & PaperConfig are initialized
         io.papermc.paper.command.PaperCommands.registerCommands(this); // Paper - setup /paper command
         com.destroystokyo.paper.Metrics.PaperMetrics.startMetrics(); // Paper - start metrics
+        // Bloom start
+        try {
+            fr.euphyllia.bloom.configuration.GlobalConfiguration.init((java.io.File) options.valueOf("bloom-settings"));
+        } catch (Exception exception) {
+            DedicatedServer.LOGGER.error("Unable to load server configuration", exception);
+            return false;
+        }
+        // Bloom end
         com.destroystokyo.paper.VersionHistoryManager.INSTANCE.getClass(); // Paper - load version history now
         io.papermc.paper.brigadier.PaperBrigadierProviderImpl.INSTANCE.getClass(); // Paper - init PaperBrigadierProvider
 
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 8c124cb3d1238c9f3297f9f2d2345399055147fe..6517bdb942649a8624f1c806d7669ae1fa33be92 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -160,6 +160,12 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     // Paper end - add paper world config
 
     public final com.destroystokyo.paper.antixray.ChunkPacketBlockController chunkPacketBlockController; // Paper - Anti-Xray
+    // Bloom start
+    private final fr.euphyllia.bloom.configuration.WorldConfiguration bloomConfig;
+    public fr.euphyllia.bloom.configuration.WorldConfiguration bloomConfig() {
+        return this.bloomConfig;
+    }
+    // Bloom end
     public final co.aikar.timings.WorldTimingsHandler timings; // Paper
     public static BlockPos lastPhysicsProblem; // Spigot
     private org.spigotmc.TickLimiter entityLimiter;
@@ -236,6 +242,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     protected Level(WritableLevelData worlddatamutable, ResourceKey<Level> resourcekey, RegistryAccess iregistrycustom, Holder<DimensionType> holder, Supplier<ProfilerFiller> supplier, boolean flag, boolean flag1, long i, int j, org.bukkit.generator.ChunkGenerator gen, org.bukkit.generator.BiomeProvider biomeProvider, org.bukkit.World.Environment env, java.util.function.Function<org.spigotmc.SpigotWorldConfig, io.papermc.paper.configuration.WorldConfiguration> paperWorldConfigCreator, java.util.concurrent.Executor executor) { // Paper - create paper world config; Async-Anti-Xray: Pass executor
         this.spigotConfig = new org.spigotmc.SpigotWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName()); // Spigot
         this.paperConfig = paperWorldConfigCreator.apply(this.spigotConfig); // Paper - create paper world config
+        this.bloomConfig = new fr.euphyllia.bloom.configuration.WorldConfiguration(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName(), env);
         this.generator = gen;
         this.world = new CraftWorld((ServerLevel) this, gen, biomeProvider, env);
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 477a7bd66cd07ddcc074270b8ec5f2dc5a803baf..b962394daea6d43282cbab251273bf8aececa309 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -257,6 +257,7 @@ import org.bukkit.scoreboard.Criteria;
 import org.bukkit.structure.StructureManager;
 import org.bukkit.util.StringUtil;
 import org.bukkit.util.permissions.DefaultPermissions;
+import org.jetbrains.annotations.NotNull;
 import org.yaml.snakeyaml.LoaderOptions;
 import org.yaml.snakeyaml.Yaml;
 import org.yaml.snakeyaml.constructor.SafeConstructor;
@@ -1097,6 +1098,7 @@ public final class CraftServer implements Server {
 
         org.spigotmc.SpigotConfig.init((File) this.console.options.valueOf("spigot-settings")); // Spigot
         this.console.paperConfigurations.reloadConfigs(this.console);
+        fr.euphyllia.bloom.configuration.GlobalConfiguration.init((File) console.options.valueOf("bloom-settings")); // Bloom
         for (ServerLevel world : this.console.getAllLevels()) {
             // world.serverLevelData.setDifficulty(config.difficulty); // Paper - per level difficulty
             world.setSpawnSettings(world.serverLevelData.getDifficulty() != Difficulty.PEACEFUL && config.spawnMonsters, config.spawnAnimals); // Paper - per level difficulty (from MinecraftServer#setDifficulty(ServerLevel, Difficulty, boolean))
@@ -1112,6 +1114,7 @@ public final class CraftServer implements Server {
                 }
             }
             world.spigotConfig.init(); // Spigot
+            world.bloomConfig().init(); // Bloom
         }
 
         Plugin[] pluginClone = pluginManager.getPlugins().clone(); // Paper
@@ -3093,6 +3096,13 @@ public final class CraftServer implements Server {
             return CraftServer.this.console.paperConfigurations.createLegacyObject(CraftServer.this.console);
         }
 
+        // Bloom start
+        public @NotNull YamlConfiguration getBloomConfig()
+        {
+            return fr.euphyllia.bloom.configuration.GlobalConfiguration.config;
+        }
+        // Bloom end
+
         @Override
         public void restart() {
             org.spigotmc.RestartCommand.restart();
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index c988afa496d25314451435eedd64079a0d87cef0..04850c67e4995cebd694a721dc588a068b3ccf68 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -175,6 +175,14 @@ public class Main {
                         .describedAs("Jar file");
                 // Paper end
 
+                // Bloom start
+                acceptsAll(asList("bloom", "bloom-settings"), "File for bloom settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File(io.papermc.paper.configuration.PaperConfigurations.CONFIG_DIR, "bloom.yml"))
+                        .describedAs("Yml file");
+                // Bloom end
+
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
                         .withRequiredArg()
